// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0--rc1
// source: slide/v1/device.proto

package slideschema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Addresses             []*Address             `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	BootedAt              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=booted_at,json=bootedAt" json:"booted_at,omitempty"`
	ClientId              *string                `protobuf:"bytes,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	DeviceId              *string                `protobuf:"bytes,4,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	DisplayName           *string                `protobuf:"bytes,5,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	HardwareModelName     *string                `protobuf:"bytes,6,opt,name=hardware_model_name,json=hardwareModelName" json:"hardware_model_name,omitempty"`
	Hostname              *string                `protobuf:"bytes,7,opt,name=hostname" json:"hostname,omitempty"`
	ImageVersion          *string                `protobuf:"bytes,8,opt,name=image_version,json=imageVersion" json:"image_version,omitempty"`
	IpAddresses           []string               `protobuf:"bytes,9,rep,name=ip_addresses,json=ipAddresses" json:"ip_addresses,omitempty"`
	LastSeenAt            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_seen_at,json=lastSeenAt" json:"last_seen_at,omitempty"`
	Nfr                   *bool                  `protobuf:"varint,11,opt,name=nfr" json:"nfr,omitempty"`
	PackageVersion        *string                `protobuf:"bytes,12,opt,name=package_version,json=packageVersion" json:"package_version,omitempty"`
	SerialNumber          *string                `protobuf:"bytes,13,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ServiceModelName      *string                `protobuf:"bytes,14,opt,name=service_model_name,json=serviceModelName" json:"service_model_name,omitempty"`
	ServiceModelNameShort *string                `protobuf:"bytes,15,opt,name=service_model_name_short,json=serviceModelNameShort" json:"service_model_name_short,omitempty"`
	ServiceStatus         *string                `protobuf:"bytes,16,opt,name=service_status,json=serviceStatus" json:"service_status,omitempty"`
	StorageTotalBytes     *uint64                `protobuf:"varint,17,opt,name=storage_total_bytes,json=storageTotalBytes" json:"storage_total_bytes,omitempty"`
	StorageUsedBytes      *uint64                `protobuf:"varint,18,opt,name=storage_used_bytes,json=storageUsedBytes" json:"storage_used_bytes,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_slide_v1_device_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_slide_v1_device_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_slide_v1_device_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Device) GetBootedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BootedAt
	}
	return nil
}

func (x *Device) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *Device) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *Device) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Device) GetHardwareModelName() string {
	if x != nil && x.HardwareModelName != nil {
		return *x.HardwareModelName
	}
	return ""
}

func (x *Device) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *Device) GetImageVersion() string {
	if x != nil && x.ImageVersion != nil {
		return *x.ImageVersion
	}
	return ""
}

func (x *Device) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *Device) GetLastSeenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeenAt
	}
	return nil
}

func (x *Device) GetNfr() bool {
	if x != nil && x.Nfr != nil {
		return *x.Nfr
	}
	return false
}

func (x *Device) GetPackageVersion() string {
	if x != nil && x.PackageVersion != nil {
		return *x.PackageVersion
	}
	return ""
}

func (x *Device) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *Device) GetServiceModelName() string {
	if x != nil && x.ServiceModelName != nil {
		return *x.ServiceModelName
	}
	return ""
}

func (x *Device) GetServiceModelNameShort() string {
	if x != nil && x.ServiceModelNameShort != nil {
		return *x.ServiceModelNameShort
	}
	return ""
}

func (x *Device) GetServiceStatus() string {
	if x != nil && x.ServiceStatus != nil {
		return *x.ServiceStatus
	}
	return ""
}

func (x *Device) GetStorageTotalBytes() uint64 {
	if x != nil && x.StorageTotalBytes != nil {
		return *x.StorageTotalBytes
	}
	return 0
}

func (x *Device) GetStorageUsedBytes() uint64 {
	if x != nil && x.StorageUsedBytes != nil {
		return *x.StorageUsedBytes
	}
	return 0
}

type Address struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mac           *string                `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	Ips           []string               `protobuf:"bytes,2,rep,name=ips" json:"ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_slide_v1_device_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_slide_v1_device_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_slide_v1_device_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *Address) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

var File_slide_v1_device_proto protoreflect.FileDescriptor

var file_slide_v1_device_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xed, 0x05, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x66, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x66, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x2d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70,
	0x73, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x67, 0x69, 0x62, 0x73, 0x6f, 0x6e, 0x2f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x3b,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var (
	file_slide_v1_device_proto_rawDescOnce sync.Once
	file_slide_v1_device_proto_rawDescData []byte
)

func file_slide_v1_device_proto_rawDescGZIP() []byte {
	file_slide_v1_device_proto_rawDescOnce.Do(func() {
		file_slide_v1_device_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_slide_v1_device_proto_rawDesc), len(file_slide_v1_device_proto_rawDesc)))
	})
	return file_slide_v1_device_proto_rawDescData
}

var file_slide_v1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_slide_v1_device_proto_goTypes = []any{
	(*Device)(nil),                // 0: slide.v1.Device
	(*Address)(nil),               // 1: slide.v1.Address
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_slide_v1_device_proto_depIdxs = []int32{
	1, // 0: slide.v1.Device.addresses:type_name -> slide.v1.Address
	2, // 1: slide.v1.Device.booted_at:type_name -> google.protobuf.Timestamp
	2, // 2: slide.v1.Device.last_seen_at:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_slide_v1_device_proto_init() }
func file_slide_v1_device_proto_init() {
	if File_slide_v1_device_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_slide_v1_device_proto_rawDesc), len(file_slide_v1_device_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_slide_v1_device_proto_goTypes,
		DependencyIndexes: file_slide_v1_device_proto_depIdxs,
		MessageInfos:      file_slide_v1_device_proto_msgTypes,
	}.Build()
	File_slide_v1_device_proto = out.File
	file_slide_v1_device_proto_goTypes = nil
	file_slide_v1_device_proto_depIdxs = nil
}
